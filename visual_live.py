from flask import Flask, render_template_string, request, redirect, url_for, send_file, flash
import pandas as pd
import os
import math
import plotly.express as px
import plotly.utils
import json
from doangiaxe import DuDoanGiaXeOtoCu
import doangiaxe  # Import l·ªõp t·ª´ file doangiaxe.py


# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)
app.secret_key = 'your_secret_key'
UPLOAD_FOLDER = "uploads"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

ROWS_PER_PAGE = 10  # S·ªë d√≤ng hi·ªÉn th·ªã m·ªói trang

# Trang ch·ªß
INDEX_HTML = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D·ª± ƒêo√°n Gi√° Xe √î T√¥ C≈©</title>
    <style>
        body {
            font-family: "Arial", sans-serif;
            background: #ffebcd;
            color: #333;
        }
        h1 {
            text-align: center;
            color: #d9534f;
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 20px;
            font-family: "Roboto", sans-serif;
        }
        .header {
            display: flex;
            justify-content: space-between;
            padding: 20px;
            background-color: #f39c12;
            color: white;
        }
        .header-left {
            font-size: 1.5em;
            font-family: "Roboto", sans-serif;
        }
        form {
            text-align: center;
            margin-top: 20px;
        }
        label {
            font-size: 1.2em;
            margin-right: 10px;
            font-family: "Roboto", sans-serif;
        }
        input[type="file"] {
            padding: 10px;
            font-size: 1em;
            border-radius: 5px;
        }
        button {
            padding: 10px 20px;
            font-size: 1.2em;
            background-color: #28a745;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }
        button:hover {
            background-color: #218838;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            font-size: 1em;
            color: #d9534f;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-left">
            T√™n Nh√≥m: AIIA | HUTECH ƒê·∫°i H·ªçc C√¥ng Ngh·ªá Th√†nh Ph·ªë H·ªì Ch√≠ Minh
        </div>
    </div>
    <h1>üéÜ D·ª± ƒêo√°n Gi√° Xe √î T√¥ C≈© üéá</h1>
    <form action="/upload" method="post" enctype="multipart/form-data" style="text-align:center; margin-top: 20px;">
        <label for="file">üéÅ Ch·ªçn file CSV:</label>
        <input type="file" name="file" id="file">
        <button type="submit">‚ú® T·∫£i l√™n v√† D·ª± ƒëo√°n ‚ú®</button>
    </form>
    <div class="footer">
        <p>Ch√∫c M·ª´ng NƒÉm M·ªõi! üßßüéâ</p>
    </div>
</body>
</html>
"""

# Trang k·∫øt qu·∫£ v·ªõi bi·ªÉu ƒë·ªì v√† b·∫£ng d·ªØ li·ªáu
RESULTS_HTML = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>K·∫øt Qu·∫£ D·ª± ƒêo√°n</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {
            font-family: "Arial", sans-serif;
            background: #fff5e6;
            color: #333;
            margin: 0;
            padding: 0;
        }
        h1 {
            text-align: center;
            color: #d9534f;
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 20px;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            background-color: #f39c12;
            color: white;
        }
        .header-left {
            font-size: 1.5em;
            font-family: "Roboto", sans-serif;
        }
        
        /* Hamburger Menu Styles */
        .menu-btn {
            font-size: 24px;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 10px;
        }
        
        .dropdown {
            position: relative;
            display: inline-block;
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: #f9f9f9;
            min-width: 200px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            border-radius: 5px;
        }
        
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.3s;
        }
        
        .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        
        .show {
            display: block;
        }
        
        table {
            margin: auto;
            border-collapse: collapse;
            width: 90%;
            background-color: rgba(255, 255, 255, 0.8);
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #FF6347;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: #ddd;
        }
        .plot-container {
            width: 95%;
            margin: auto;
        }
        .pagination {
            text-align: center;
            margin-top: 20px;
        }
        .pagination a {
            color: #FF6347;
            font-size: 1.2em;
            padding: 10px;
            text-decoration: none;
        }
        .pagination a:hover {
            background-color: #ddd;
        }
    </style>
    <script>
        function toggleMenu() {
            document.getElementById("myDropdown").classList.toggle("show");
        }
        
        window.onclick = function(event) {
            if (!event.target.matches('.menu-btn')) {
                var dropdowns = document.getElementsByClassName("dropdown-content");
                for (var i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        }
    </script>
</head>
<body>
    <div class="header">
        <div class="header-left">
            T√™n Nh√≥m: AIIA | HUTECH ƒê·∫°i H·ªçc C√¥ng Ngh·ªá Th√†nh Ph·ªë H·ªì Ch√≠ Minh
        </div>
        <div class="dropdown">
            <button onclick="toggleMenu()" class="menu-btn">‚ò∞</button>
            <div id="myDropdown" class="dropdown-content">
                <a href="{{ url_for('compare', filename=filename) }}">üîç Xem m√¥ h√¨nh so s√°nh</a>
                <a href="{{ file_url }}">üéÅ T·∫£i v·ªÅ k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß</a>
                <a href="{{ url_for('index') }}">üè† V·ªÅ trang ch·ªß</a>
            </div>
        </div>
    </div>
    <h1>üéÅ K·∫øt Qu·∫£ D·ª± ƒêo√°n üéÅ</h1>
    <div class="plot-container">
        <div id="chart"></div>
        <script>
            var chartData = {{ chart_data | safe }};
            Plotly.newPlot('chart', chartData.data, chartData.layout);
        </script>
    </div>
    <table>
        <thead>
            <tr>
                <th>H√£ng</th>
                <th>Model</th>
                <th>NƒÉm s·∫£n xu·∫•t</th>
                <th>Qu√£ng ƒë∆∞·ªùng ƒë√£ ƒëi</th>
                <th>Lo·∫°i nhi√™n li·ªáu</th>
                <th>ƒê·ªông c∆°</th>
                <th>H·ªôp s·ªë</th>
                <th>M√†u ngo√†i</th>
                <th>M√†u trong</th>
                <th>T√¨nh tr·∫°ng tai n·∫°n</th>
                <th>Ti√™u ƒë·ªÅ s·∫°ch</th>
                <th>Gi√° hi·ªán t·∫°i</th>
                <th>Gi√° d·ª± ƒëo√°n</th>
                <th>Gi√° ch√™nh l·ªách</th>
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
            <tr>
                <td>{{ row["brand"] }}</td>
                <td>{{ row["model"] }}</td>
                <td>{{ row["model_year"] }}</td>
                <td>{{ row["milage"] }}</td>
                <td>{{ row["fuel_type"] }}</td>
                <td>{{ row["engine"] }}</td>
                <td>{{ row["transmission"] }}</td>
                <td>{{ row["ext_col"] }}</td>
                <td>{{ row["int_col"] }}</td>
                <td>{{ row["accident"] }}</td>
                <td>{{ row["clean_title"] }}</td>
                <td>{{ row["price"] }}</td>
                <td>{{ row["predicted_price"] }}</td>
                <td>{{ row["price_difference"] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <div class="pagination">
        {% if page > 1 %}
        <a href="{{ url_for('predict', filename=filename, page=page-1) }}">‚¨ÖÔ∏è Trang tr∆∞·ªõc</a>
        {% endif %}
        <span>üå∏üå∏üå∏ Trang {{ page }} / {{ total_pages }} üå∏üå∏üå∏</span>
        {% if page < total_pages %}
        <a href="{{ url_for('predict', filename=filename, page=page+1) }}">Trang sau ‚û°Ô∏è</a>
        {% endif %}
        <form method="get" action="{{ url_for('predict', filename=filename) }}" style="margin-top: 10px;">
            <label for="page">Nh·∫≠p s·ªë trang mu·ªën ƒë·∫øn:</label>
            <input type="number" id="page" name="page" min="1" max="{{ total_pages }}" value="{{ page }}">
            <button type="submit">Chuy·ªÉn</button>
        </form>
    </div>
</body>
</html>
"""

# Trang so s√°nh m√¥ h√¨nh (gi·ªØ nguy√™n nh∆∞ c≈©)
COMPARE_HTML = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>So S√°nh Hi·ªáu Su·∫•t M√¥ H√¨nh</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {
            font-family: "Arial", sans-serif;
            background: #fff5e6;
            color: #333;
        }
        h1, h2 {
            text-align: center;
            color: #d9534f;
            font-weight: bold;
        }
        h1 { font-size: 2.5em; margin-bottom: 20px; }
        h2 { font-size: 1.8em; margin-top: 30px; }
        .header {
            display: flex;
            justify-content: space-between;
            padding: 20px;
            background-color: #f39c12;
            color: white;
        }
        .header-left {
            font-size: 1.5em;
            font-family: "Roboto", sans-serif;
        }
        .header-right {
            font-size: 1em;
            text-align: right;
        }
        table {
            margin: auto;
            border-collapse: collapse;
            width: 90%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #FF6347;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: #ddd;
        }
        .plot-container {
            width: 90%;
            margin: auto;
            margin-top: 20px;
        }
        .total-score-table {
            background-color: #e6f2ff;
            border: 2px solid #4CAF50;
        }
        .total-score-table th {
            background-color: #4CAF50;
        }
        .total-score-header {
            color: #2196F3;
            text-align: center;
            margin-top: 30px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-left">
            T√™n Nh√≥m: AIIA | HUTECH ƒê·∫°i H·ªçc C√¥ng Ngh·ªá Th√†nh Ph·ªë H·ªì Ch√≠ Minh
        </div>
        <div class="header-right">
            <a href="{{ url_for('predict', filename=filename) }}" style="color: white; text-decoration: none;">‚Ü©Ô∏è Quay l·∫°i</a>
        </div>
    </div>
    <h1>So S√°nh Hi·ªáu Su·∫•t C√°c M√¥ H√¨nh</h1>
    <div class="plot-container">
        <div id="chart"></div>
        <script>
            var chartData = {{ chart_data | safe }};
            Plotly.newPlot('chart', chartData.data, chartData.layout);
        </script>
    </div>
    <table>
        <thead>
            <tr>
                <th>T√™n M√¥ H√¨nh</th>
                <th>MSE</th>
                <th>RMSE</th>
                <th>R2</th>
                <th>MAE</th>
                <th>MAPE</th>
            </tr>
        </thead>
        <tbody>
            {% for model, metrics in models.items() %}
            <tr>
                <td>{{ model }}</td>
                <td>{{ metrics['MSE'] }}</td>
                <td>{{ metrics['RMSE'] }}</td>
                <td>{{ metrics['R2'] }}</td>
                <td>{{ metrics['MAE'] }}</td>
                <td>{{ metrics['MAPE'] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <h2 class="total-score-header">üèÜ B·∫£ng T·ªïng ƒêi·ªÉm M√¥ H√¨nh üèÜ</h2>
<table class="total-score-table">
    <thead>
        <tr>
            <th>T√™n M√¥ H√¨nh</th>
            <th>R2 ƒêi·ªÉm (40%)</th>
            <th>MAPE ƒêi·ªÉm (30%)</th>
            <th>RMSE ƒêi·ªÉm (30%)</th>
            <th>T·ªïng ƒêi·ªÉm</th>
        </tr>
    </thead>
    <tbody>
        {% for model, metrics in models.items() %}
        <tr>
            <td>{{ model }}</td>
            <td>{{ metrics['R2_Score'] }}</td>
            <td>{{ metrics['MAPE_Score'] }}</td>
            <td>{{ metrics['RMSE_Score'] }}</td>
            <td>{{ metrics['Total_Score'] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

    <h2>Gi·ªõi thi·ªáu v·ªÅ c√°c ch·ªâ s·ªë hi·ªáu su·∫•t</h2>
    <p>ƒê·ªÉ so s√°nh hi·ªáu su·∫•t c·ªßa c√°c m√¥ h√¨nh d·ª± ƒëo√°n, ch√∫ng ta s·ª≠ d·ª•ng c√°c ch·ªâ s·ªë sau:</p>

    <ul>
        <li><strong>R2 (Coefficient of Determination):</strong> R2 l√† m·ªôt ch·ªâ s·ªë ƒëo l∆∞·ªùng m·ª©c ƒë·ªô ph√π h·ª£p c·ªßa m√¥ h√¨nh v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø. Gi√° tr·ªã R2 n·∫±m trong kho·∫£ng t·ª´ 0 ƒë·∫øn 1, v·ªõi 1 l√† m√¥ h√¨nh ho√†n h·∫£o. Ch√∫ng ta g√°n tr·ªçng s·ªë 0.4 cho R2, nghƒ©a l√† R2 s·∫Ω ƒë√≥ng g√≥p 40% v√†o t·ªïng ƒëi·ªÉm c·ªßa m·ªói m√¥ h√¨nh.</li>
        <li><strong>MAPE (Mean Absolute Percentage Error):</strong> MAPE l√† ch·ªâ s·ªë ƒëo l∆∞·ªùng sai s·ªë t∆∞∆°ng ƒë·ªëi trung b√¨nh, t√≠nh b·∫±ng ph·∫ßn trƒÉm. Gi√° tr·ªã MAPE c√†ng th·∫•p, m√¥ h√¨nh c√†ng ch√≠nh x√°c. Ch√∫ng ta mu·ªën t·ªëi ƒëa h√≥a (1 - MAPE), v√¨ v·∫≠y ch√∫ng ta s·∫Ω nh√¢n v·ªõi tr·ªçng s·ªë 0.3, t∆∞∆°ng ƒë∆∞∆°ng v·ªõi 30% t·ªïng ƒëi·ªÉm.</li>
        <li><strong>RMSE (Root Mean Squared Error):</strong> RMSE l√† cƒÉn b·∫≠c hai c·ªßa MSE (Mean Squared Error), ƒëo l∆∞·ªùng ƒë·ªô l·ªách trung b√¨nh c·ªßa d·ª± ƒëo√°n so v·ªõi gi√° tr·ªã th·ª±c t·∫ø. Gi√° tr·ªã RMSE c√†ng th·∫•p, m√¥ h√¨nh c√†ng ch√≠nh x√°c. Ch√∫ng ta mu·ªën t·ªëi ƒëa h√≥a (1 - RMSE / y_test.std()), v√¨ v·∫≠y ch√∫ng ta s·∫Ω nh√¢n v·ªõi tr·ªçng s·ªë 0.3, t∆∞∆°ng ƒë∆∞∆°ng v·ªõi 30% t·ªïng ƒëi·ªÉm.</li>
    </ul>

    <h2>T√≥m t·∫Øt v·ªÅ c√°c ch·ªâ s·ªë hi·ªáu su·∫•t</h2>
    <p>B·∫±ng c√°ch n√†y, ch√∫ng ta s·∫Ω t√≠nh t·ªïng ƒëi·ªÉm cho m·ªói m√¥ h√¨nh, s·ª≠ d·ª•ng s·ª± k·∫øt h·ª£p c·ªßa ba ch·ªâ s·ªë hi·ªáu su·∫•t quan tr·ªçng (R2, MAPE v√† RMSE). M√¥ h√¨nh c√≥ t·ªïng ƒëi·ªÉm cao nh·∫•t s·∫Ω ƒë∆∞·ª£c ch·ªçn l√†m m√¥ h√¨nh t·ªët nh·∫•t.</p>
</body>
</html>
"""

@app.route("/")
def index():
    return render_template_string(INDEX_HTML)

@app.route("/upload", methods=["POST"])
def upload_file():
    if "file" not in request.files:
        flash("Kh√¥ng t√¨m th·∫•y file!", "error")
        return redirect(url_for("index"))
    file = request.files["file"]
    if file.filename == "":
        flash("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn!", "error")
        return redirect(url_for("index"))
    if file:
        filepath = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(filepath)
        return redirect(url_for("predict", filename=file.filename, page=1))

@app.route("/predict/<filename>", methods=["GET"])
def predict(filename):
    page = int(request.args.get("page", 1))
    filepath = os.path.join(UPLOAD_FOLDER, filename)

    try:
        predictor = DuDoanGiaXeOtoCu(filepath)
        predictor.tai_du_lieu()
    except Exception as e:
        app.logger.error(f"Error loading data: {e}")
        flash("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.", "error")
        return redirect(url_for("index"))

    _, X_test, y_test = predictor.huan_luyen_mo_hinh()

    try:
        y_pred = predictor.mo_hinh_tot_nhat.predict(predictor.du_lieu[predictor.dac_trung])
        du_lieu_goc = predictor.du_lieu.copy()
        du_lieu_goc["predicted_price"] = y_pred
        du_lieu_goc["price_difference"] = (y_pred - du_lieu_goc["price"]).round(2)
    except Exception as e:
        app.logger.error(f"Error making predictions: {e}")
        flash("ƒê√£ x·∫£y ra l·ªói khi d·ª± ƒëo√°n gi√°.", "error")
        return redirect(url_for("index"))

    du_lieu_goc["price"] = du_lieu_goc["price"].apply(lambda x: f"${x:,.2f}")
    du_lieu_goc["predicted_price"] = du_lieu_goc["predicted_price"].apply(lambda x: f"${x:,.2f}")
    du_lieu_goc["price_difference"] = du_lieu_goc["price_difference"].apply(lambda x: f"${x:,.2f}")

    min_price = request.args.get("min_price", type=int)
    max_price = request.args.get("max_price", type=int)
    min_predicted = request.args.get("min_predicted", type=int)
    max_predicted = request.args.get("max_predicted", type=int)

    if min_price:
        du_lieu_goc = du_lieu_goc[du_lieu_goc["price"].str.replace(",", "").str.extract(r'(\d+)', expand=False).astype(int) >= min_price]
    if max_price:
        du_lieu_goc = du_lieu_goc[du_lieu_goc["price"].str.replace(",", "").str.extract(r'(\d+)', expand=False).astype(int) <= max_price]
    if min_predicted:
        du_lieu_goc = du_lieu_goc[du_lieu_goc["predicted_price"].str.replace(",", "").str.extract(r'(\d+)', expand=False).astype(int) >= min_predicted]
    if max_predicted:
        du_lieu_goc = du_lieu_goc[du_lieu_goc["predicted_price"].str.replace(",", "").str.extract(r'(\d+)', expand=False).astype(int) <= max_predicted]

    total_rows = len(du_lieu_goc)
    total_pages = math.ceil(total_rows / ROWS_PER_PAGE)
    start_row = (page - 1) * ROWS_PER_PAGE
    end_row = start_row + ROWS_PER_PAGE
    data_preview = du_lieu_goc.iloc[start_row:end_row]

    try:
        fig = px.scatter(
            data_preview,
            x="price",
            y="predicted_price",
            color="brand",
            hover_data=["model", "model_year", "price", "predicted_price", "price_difference"],
            title="Gi√° hi·ªán t·∫°i vs Gi√° d·ª± ƒëo√°n (Trang {})".format(page)
        )

        fig.update_layout(xaxis_title="Gi√° hi·ªán t·∫°i ($)", yaxis_title="Gi√° d·ª± ƒëo√°n ($)", legend_title="H√£ng xe")

        chart_data = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    except Exception as e:
        app.logger.error(f"Error generating chart: {e}")
        flash("ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.", "error")
        chart_data = None

    return render_template_string(RESULTS_HTML, 
                                data=data_preview.to_dict(orient="records"),
                                page=page, 
                                total_pages=total_pages, 
                                filename=filename, 
                                file_url=url_for("download_file", filename="ket_qua_du_doan.csv"),
                                chart_data=chart_data,
                                min_price=min_price,
                                max_price=max_price,
                                min_predicted=min_predicted,
                                max_predicted=max_predicted)


def calculate_model_scores(models_metrics, y_test):
    scored_models = {}
    for model_name, metrics in models_metrics.items():
        r2_score = metrics['R2']
        mape_score = 1 - metrics['MAPE']
        rmse_score = 1 - metrics['RMSE'] / y_test.std()

        total_score = r2_score * 0.4 + mape_score * 0.3 + rmse_score * 0.3
        scored_models[model_name] = {
            'R2_Score': round(r2_score * 100, 2),
            'MAPE_Score': round(mape_score * 100, 2),
            'RMSE_Score': round(rmse_score * 100, 2),
            'Total_Score': round(total_score * 100, 2)
        }
    return scored_models

def generate_model_comparison_plot(models_metrics):
    """
    T·∫°o bi·ªÉu ƒë·ªì so s√°nh hi·ªáu su·∫•t c√°c m√¥ h√¨nh
    """
    import plotly.graph_objs as go
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    models = list(models_metrics.keys())
    r2_values = [metrics['R2'] for metrics in models_metrics.values()]
    mape_values = [metrics['MAPE'] for metrics in models_metrics.values()]
    rmse_values = [metrics['RMSE'] for metrics in models_metrics.values()]
    total_scores = [metrics['Total_Score'] for metrics in models_metrics.values()]
    
    # T·∫°o bi·ªÉu ƒë·ªì so s√°nh ƒëa ch·ªâ s·ªë
    fig = go.Figure(data=[
        go.Bar(name='R2', x=models, y=r2_values),
        go.Bar(name='MAPE', x=models, y=mape_values),
        go.Bar(name='RMSE', x=models, y=rmse_values),
        go.Scatter(
            name='T·ªïng ƒêi·ªÉm', 
            x=models, 
            y=total_scores, 
            mode='lines+markers',
            line=dict(color='red', width=2),
            marker=dict(size=10)
        )
    ])
    
    # C·∫•u h√¨nh layout
    fig.update_layout(
        title='So S√°nh Hi·ªáu Su·∫•t C√°c M√¥ H√¨nh',
        xaxis_title='M√¥ H√¨nh',
        yaxis_title='Gi√° Tr·ªã',
        barmode='group'
    )
    
    # Chuy·ªÉn bi·ªÉu ƒë·ªì sang d·∫°ng JSON ƒë·ªÉ render
    return json.loads(fig.to_json())

from doangiaxe import DuDoanGiaXeOtoCu

@app.route('/compare', methods=['POST'])
def compare_models():
    duong_dan_du_lieu = request.form['duong_dan_du_lieu']
    he_thong = DuDoanGiaXeOtoCu(duong_dan_du_lieu)
    he_thong.tai_du_lieu()
    ket_qua, X_test, y_test = he_thong.huan_luyen_mo_hinh()

    # T√≠nh ƒëi·ªÉm s·ªë v√† tr·∫£ v·ªÅ cho template
    scored_models = calculate_model_scores(ket_qua)
    chart_data = generate_model_comparison_plot(scored_models)

    return render_template_string(
        COMPARE_HTML, 
        models=scored_models, 
        chart_data=chart_data,
        filename=request.form.get('filename', '')
    )

@app.route("/compare/<filename>")
def compare(filename):
    filepath = os.path.join(UPLOAD_FOLDER, filename)

    try:
        predictor = DuDoanGiaXeOtoCu(filepath)
        predictor.tai_du_lieu()
        results, _, _ = predictor.huan_luyen_mo_hinh()
    except Exception as e:
        app.logger.error(f"Error loading data or training models: {e}")
        flash("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ho·∫∑c hu·∫•n luy·ªán m√¥ h√¨nh.", "error")
        return redirect(url_for("index"))

    try:
        model_names = list(results.keys())
        metrics = ['MSE', 'RMSE', 'R2', 'MAE', 'MAPE']
        data = {
            metric: [results[model][metric] for model in model_names] for metric in metrics
        }

        fig = px.bar(
            pd.DataFrame(data, index=model_names).reset_index().melt(id_vars=['index'], var_name='Metric', value_name='Value'),
            x='index', y='Value', color='Metric',
            title="So S√°nh Hi·ªáu Su·∫•t M√¥ H√¨nh",
            labels={'index': 'T√™n M√¥ H√¨nh'}
        )

        fig.update_layout(xaxis_title="M√¥ H√¨nh", yaxis_title="Gi√° Tr·ªã", legend_title="Ch·ªâ S·ªë")

        chart_data = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    except Exception as e:
        app.logger.error(f"Error generating comparison chart: {e}")
        flash("ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã so s√°nh m√¥ h√¨nh.", "error")
        chart_data = None

    return render_template_string(COMPARE_HTML, models=results, chart_data=chart_data, filename=filename)

@app.route("/download/<filename>")
def download_file(filename):
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    return send_file(filepath, as_attachment=True)

@app.errorhandler(500)
def internal_error(error):
    app.logger.error(f"Internal Server Error: {error}")
    flash("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.", "error")
    return redirect(url_for("index"))

if __name__ == "__main__":
    app.run(debug=False)